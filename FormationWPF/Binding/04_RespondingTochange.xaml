<Window x:Class="FormationWPF.Binding._04_RespondingTochange"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FormationWPF.Binding"
        mc:Ignorable="d"
        Title="_04_RespondingTochange" Height="450" Width="800">
    <DockPanel>
        <!--
            Lors de la liaison  de  données entre la source de données et la vue (cible).
           Il existe deux scénarios différents que vous pouvez ou non souhaiter gérer lorsque vous traiter 
            des modifications de vos données : 
      
                - Modifications de la liste des élements : Comment notifier les utilisateurs des changements apportés à la collection
                - Modifications des propriétés des objets :
        
           WPF propose deux solutions : ObservableCollection et l'interface INotifyPropertyChanged
        
            Première étape : Sans ObservableCollection et l'interface INotifyPropertyChanged
                    ==> Aucune modification est refletée sur l'interface graphique 
        
            Deuxième étape : Utilisation de ObservableCollection
                ==> Incapable  d'alerter la couche d'interface utilisateur des modifications apportées à ses propriétés.
        
        Troisième étape : Utilisation de l'interface INotifyPropertyChanged
             Cette interface met à disposition l’événement PropertyChanged qu’il faut déclencher chaque fois
            qu’une propriété est modifiée
            On va implementer donc notre classe User avec l'interface INotifyPropertyChanged
            En faisant cela, nos objets Users  seront capables d'alerter la couche d'interface utilisateur 
            des modifications apportées à ses propriétés.
        -->
        <StackPanel DockPanel.Dock="Right" Margin="10">
            <Button x:Name="btnAddUser" Click="btnAddUser_Click" Margin="0,10">Add User</Button>
            <Button x:Name="btnChangeUser" Click="btnChangeUser_Click" Margin="0,10">Change User</Button>
            <Button x:Name="btnDeleteUser" Click="btnDeleteUser_Click" Margin="0,10">Delete User</Button>
        </StackPanel>

        <!--DisplayMemberPath spécifie le chemin d'accès à la propriété  idem que le "{binding UserName}
            Spécifie ou définit le chemin de la propriété UserName de l'objet Source qui sera affiché 
            dans la listBox
            La ListBox reférencé par lstUsers est liée à la propriété UserName de l'objet source (User)
        -->
        <ListBox  Margin="10" x:Name="lstUsers"  DisplayMemberPath="UserName"/>
    </DockPanel>
</Window>
